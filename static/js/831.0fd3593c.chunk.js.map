{"version":3,"file":"static/js/831.0fd3593c.chunk.js","mappings":"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","sources":["shared/cloud-gtlf/cloud-gtlf.js","components/nodes/node.js","components/site-canvas/site-playground/site-scene.js","components/site-canvas/site-playground/site-playground.js"],"sourcesContent":["import { meshBounds, useCursor, useGLTF } from \"@react-three/drei\";\r\nimport { forwardRef, useMemo, useRef, useState } from \"react\";\r\nimport { MeshBasicMaterial, MeshStandardMaterial } from \"three\";\r\nimport { isMobile } from \"../../utils/utils\";\r\n\r\nimport \"./cloud-gtlf.scss\";\r\n\r\nexport const CloudGLTF = forwardRef((props, ref) => {\r\n  const { scene } = useGLTF(props.cloudGlbURL);\r\n  const [hovered, set] = useState();\r\n  useCursor(hovered, \"pointer\");\r\n\r\n  // const group = useRef();\r\n  const isMob = isMobile();\r\n\r\n  const copiedScene = useMemo(() => {\r\n    scene.children.forEach(function (m) {\r\n      if (m.isMesh) {\r\n        if (props.fast || isMob) {\r\n          m.material = new MeshBasicMaterial({ color: m.material.color });\r\n        } else {\r\n          m.material = new MeshStandardMaterial({\r\n            color: m.material.color,\r\n            metalness: 1,\r\n            emissive: 1,\r\n            roughness: 0.5,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return scene.clone();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [scene.uuid]);\r\n\r\n  const onPointerOver = (e) => {\r\n    e.stopPropagation();\r\n    set(true);\r\n  };\r\n\r\n  const onPointerOut = (e) => {\r\n    e.stopPropagation();\r\n    set(false);\r\n  };\r\n\r\n  if (props.fast) {\r\n    return (\r\n      <group\r\n        ref={ref}\r\n        {...props}\r\n        dispose={null}\r\n        onPointerOver={onPointerOver}\r\n        onPointerOut={onPointerOut}\r\n      >\r\n        <primitive object={copiedScene} />\r\n      </group>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <group\r\n      ref={ref}\r\n      {...props}\r\n      dispose={null}\r\n      onPointerOver={onPointerOver}\r\n      onPointerOut={onPointerOut}\r\n      className=\"cursor-pointer\"\r\n    >\r\n      {copiedScene.children.map((_, i) => (\r\n        <CloudGLTFGroup\r\n          key={i + _.name}\r\n          {...props}\r\n          node={_}\r\n          index={i}\r\n          onHover={() => props.onHover(ref)}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n});\r\n\r\nfunction CloudGLTFGroup({ ...props }) {\r\n  const meshRef = useRef();\r\n  // useBVH(meshRef);\r\n\r\n  if (props.node.type === \"Group\") {\r\n    return (\r\n      <group\r\n        rotation={props.node.rotation}\r\n        position={props.node.position}\r\n        scale={props.node.scale}\r\n        frustumCulled\r\n      >\r\n        {props.node.children.length > 0 &&\r\n          props.node.children.map((_, i) => (\r\n            <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n          ))}\r\n      </group>\r\n    );\r\n  }\r\n  return (\r\n    <mesh\r\n      geometry={props.node.geometry}\r\n      material={props.node.material}\r\n      rotation={props.node.rotation}\r\n      position={props.node.position}\r\n      ref={meshRef}\r\n      raycast={meshBounds}\r\n      scale={props.node.scale}\r\n      onPointerOver={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n      onPointerOut={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(null);\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n    >\r\n      {props.node.children.length > 0 &&\r\n        props.node.children.map((_, i) => (\r\n          <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n        ))}\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default CloudGLTF;\r\n","import { QuadraticBezierLine } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport {\r\n  createContext,\r\n  forwardRef,\r\n  useContext,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst context = createContext();\r\nconst Circle = forwardRef(\r\n  (\r\n    {\r\n      children,\r\n      opacity = 1,\r\n      radius = 0.05,\r\n      segments = 32,\r\n      color = \"#ff1050\",\r\n      ...props\r\n    },\r\n    ref\r\n  ) => (\r\n    <mesh ref={ref} {...props}>\r\n      <circleGeometry args={[radius, segments]} />\r\n      <meshBasicMaterial\r\n        transparent={opacity < 1}\r\n        opacity={opacity}\r\n        color={color}\r\n      />\r\n      {children}\r\n    </mesh>\r\n  )\r\n);\r\n\r\nexport function Nodes({ children }) {\r\n  const group = useRef();\r\n  const [nodes, set] = useState([]);\r\n  const lines = useMemo(() => {\r\n    const lines = [];\r\n    for (let node of nodes)\r\n      node.connectedTo\r\n        .map((ref) => [node.position, ref.current.position])\r\n        .forEach(([start, end]) =>\r\n          lines.push({\r\n            start: start.clone().add({ x: 0.35, y: 0, z: 0 }),\r\n            end: end.clone().add({ x: -0.35, y: 0, z: 0 }),\r\n          })\r\n        );\r\n    return lines;\r\n  }, [nodes]);\r\n  useFrame((_, delta) =>\r\n    group.current.children.forEach(\r\n      (group) =>\r\n        (group.children[0].material.uniforms.dashOffset.value -= delta * 10)\r\n    )\r\n  );\r\n  return (\r\n    <context.Provider value={set}>\r\n      <group ref={group}>\r\n        {lines.map((line, index) => (\r\n          <group key={index + \"Bezier group\"}>\r\n            <QuadraticBezierLine\r\n              key={index + \"Bezier spot\"}\r\n              {...line}\r\n              color=\"white\"\r\n              dashed\r\n              dashScale={50}\r\n              gapSize={20}\r\n            />\r\n            <QuadraticBezierLine\r\n              key={index + \"Bezier line\"}\r\n              {...line}\r\n              color=\"red\"\r\n              lineWidth={3}\r\n              transparent\r\n              opacity={0.5}\r\n            />\r\n          </group>\r\n        ))}\r\n      </group>\r\n      {children}\r\n      {lines.map(({ start, end }, index) => (\r\n        <group key={index + \"Bezier circle\"} position-z={1}>\r\n          <Circle position={start} />\r\n          <Circle position={end} />\r\n        </group>\r\n      ))}\r\n    </context.Provider>\r\n  );\r\n}\r\n\r\nexport const Node = forwardRef(\r\n  (\r\n    { color = \"black\", name, connectedTo = [], position = [0, 0, 0], ...props },\r\n    ref\r\n  ) => {\r\n    const set = useContext(context);\r\n    const [pos] = useState(() => new THREE.Vector3(...position));\r\n    const state = useMemo(\r\n      () => ({ position: pos, connectedTo }),\r\n      [pos, connectedTo]\r\n    );\r\n    // Register this node on mount, unregister on unmount\r\n    useLayoutEffect(() => {\r\n      set((nodes) => [...nodes, state]);\r\n      return () => void set((nodes) => nodes.filter((n) => n !== state));\r\n    }, [state, pos, set]);\r\n    // Drag n drop, hover\r\n    return (\r\n      <Circle\r\n        ref={ref}\r\n        opacity={0.2}\r\n        radius={0.5}\r\n        color={color}\r\n        position={pos}\r\n        {...props}\r\n      ></Circle>\r\n    );\r\n  }\r\n);\r\n","import { useMemo } from \"react\";\r\nimport { MeshBasicMaterial, MeshStandardMaterial } from \"three\";\r\nimport { isMobile } from \"../../../utils/utils\";\r\n\r\nexport const useMemoisedScene = (scene, isFast) => {\r\n  const isMob = isMobile();\r\n\r\n  const copiedScene = useMemo(() => {\r\n    const smallObj = [];\r\n    scene.traverse((o) => {\r\n      if (!o.isMesh) {\r\n        console.log(o);\r\n        return;\r\n      }\r\n      var prevMaterial = o.material;\r\n      let radius = o.geometry?.boundingSphere.radius;\r\n      if (radius > 10 && radius < 30) {\r\n        smallObj.push(o);\r\n      }\r\n      if (radius < 300) {\r\n        o.material = new MeshBasicMaterial({\r\n          color: prevMaterial.color,\r\n          reflectivity: 1,\r\n        });\r\n      } else {\r\n        o.material = new MeshStandardMaterial({\r\n          color: prevMaterial.color,\r\n          metalness: 1,\r\n          emissive: 1,\r\n          roughness: prevMaterial.roughness ?? 0.5,\r\n        });\r\n      }\r\n    });\r\n\r\n    smallObj.forEach((o) => {\r\n      o.removeFromParent();\r\n    });\r\n\r\n    return scene.clone();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [scene.uuid]);\r\n\r\n  return { copiedScene };\r\n};\r\n\r\nexport const ROTATION_LEFT = [0, -Math.PI / 2, 0];\r\nexport const ROTATION_RIGHT = [0, Math.PI / 2, 0];\r\n\r\nexport const getPos = (LEFT_POS_START, i, isOnFocus) => {\r\n  return [\r\n    LEFT_POS_START < i ? 15 : -15,\r\n    0 + isOnFocus * 10,\r\n    (i % LEFT_POS_START) * 5,\r\n  ];\r\n};\r\n\r\nexport const WELL_HEAD_POS = [0, -1, -20];\r\nexport const DATA_VAN_POS = [15, 1, -10];\r\nexport const BLENDER_VAN_POS = [10, -1, 35];\r\nexport const MISSILE_POS = [0, 0, 20];\r\nexport const MISSILE_NODE_POS = [0, 1, 20];\r\nexport const DATA_VAN_ROT = [0, Math.PI / 2, 0];\r\n","import { IconButton } from \"@fluentui/react\";\r\nimport { Html, useGLTF } from \"@react-three/drei\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport { EffectComposer, Outline } from \"@react-three/postprocessing\";\r\nimport { Suspense, useEffect, useRef, useState } from \"react\";\r\nimport { MODELS } from \"../../../config/azure-gltf\";\r\nimport { PUMPS as HARD_CODED_PUMPS } from \"../../../config/pumps\";\r\n\r\nimport CloudGLTF from \"../../../shared/cloud-gtlf/cloud-gtlf\";\r\nimport { isMobile } from \"../../../utils/utils\";\r\n// import TruckCloudGTLF from \"../../../shared/truck-cloud-gtlf/truck-cloud-gtlf\";\r\nimport { Nodes } from \"../../nodes/node\";\r\nimport {\r\n  BLENDER_VAN_POS,\r\n  ROTATION_RIGHT,\r\n  useMemoisedScene,\r\n} from \"./site-scene\";\r\n\r\nfunction SitePlayGround(props) {\r\n  const isMob = isMobile();\r\n  const mRef = useRef(null);\r\n  const nCRef = useRef(null);\r\n  const wRef = useRef(null);\r\n  const dRef = useRef(null);\r\n  const [hovered, onHover] = useState(null);\r\n  const [prevCam, setPrevCam] = useState(null);\r\n  const [focussedTruck, onFocusTruck] = useState(null);\r\n  const { scene } = useGLTF(MODELS.TRUCK);\r\n  const cam = useThree(({ camera }) => camera);\r\n  const cont = useThree(({ controls }) => controls);\r\n  const PUMPS = props.pumpsData.length ? props.pumpsData : HARD_CODED_PUMPS;\r\n  const { copiedScene } = useMemoisedScene(scene);\r\n  const invalidate = useThree(({ invalidate }) => invalidate);\r\n  const isOnFocus = (pump) =>\r\n    !focussedTruck || pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"];\r\n\r\n  useEffect(() => {\r\n    focussedTruck && props.setSelected(focussedTruck[\"Pump Position\"]);\r\n  }, [focussedTruck, props]);\r\n\r\n  function restoreCamera() {\r\n    cam.position.set(\r\n      prevCam.position.x,\r\n      prevCam.position.y,\r\n      prevCam.position.z\r\n    );\r\n    cont?.reset();\r\n\r\n    invalidate();\r\n  }\r\n\r\n  const isActive = (pump) => pump[\"Pump Position\"] === props.selected;\r\n\r\n  const LEFT_POS_START = PUMPS.length / 2;\r\n\r\n  const selected = hovered ? [hovered] : undefined;\r\n\r\n  return (\r\n    <>\r\n      <Nodes>\r\n        <Suspense fallback={null}>\r\n          {/* {PUMPS.map((pump, i) => {\r\n            const [x, y, z] = getPos(\r\n              LEFT_POS_START,\r\n              i,\r\n              focussedTruck &&\r\n                pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"]\r\n            );\r\n            return (\r\n              <TruckCloudGTLF\r\n                key={pump[\"Pump Position\"]}\r\n                position={[x, y, z]}\r\n                onClick={() => {\r\n                  props.setSelected(pump[\"Pump Position\"]);\r\n                  invalidate();\r\n                }}\r\n                onDoubleClick={() => {\r\n                  if (isOnFocus(pump)) {\r\n                    cont?.saveState();\r\n                    const camToSave = {};\r\n                    camToSave.position = cam.position.clone();\r\n                    camToSave.rotation = cam.rotation.clone();\r\n                    camToSave.controlCenter = cont?.target?.clone();\r\n\r\n                    setPrevCam(camToSave);\r\n\r\n                    props.setSelected(pump[\"Pump Position\"]);\r\n                    onFocusTruck(pump);\r\n                    cam.position.set(4.5 * x, y + 9, 3 * z);\r\n                    invalidate();\r\n                  }\r\n                }}\r\n                onHover={onHover}\r\n                isActive={\r\n                  props.selectionOptions[\"Select All\"] || isActive(pump)\r\n                }\r\n                show={isOnFocus(pump)}\r\n                isFocussed={\r\n                  focussedTruck &&\r\n                  pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"]\r\n                }\r\n                scene={copiedScene}\r\n                pump={pump}\r\n                setAlertedParts={props.setAlertedParts}\r\n                rotation={LEFT_POS_START < i ? ROTATION_LEFT : ROTATION_RIGHT}\r\n                cloudGlbURL={MODELS.TRUCK}\r\n                scale={focussedTruck ? 2 : 1}\r\n              />\r\n            );\r\n          })} */}\r\n        </Suspense>\r\n\r\n        {!focussedTruck ? (\r\n          <>\r\n            {/* <CloudGLTF\r\n              ref={mRef}\r\n              cloudGlbURL={MODELS.MISSILE}\r\n              assetId={4347}\r\n              onClick={(show) => null}\r\n              onHover={onHover}\r\n              position={MISSILE_POS}\r\n            />\r\n            <Node\r\n              ref={nCRef}\r\n              name=\"missile\"\r\n              position={MISSILE_NODE_POS}\r\n              connectedTo={[wRef]}\r\n            />\r\n            <CloudGLTF\r\n              ref={wRef}\r\n              cloudGlbURL={MODELS.WELL_HEAD}\r\n              onClick={(show) => null}\r\n              onHover={onHover}\r\n              position={WELL_HEAD_POS}\r\n              scale={5}\r\n            /> */}\r\n\r\n            {/* <CloudGLTF\r\n              ref={dRef}\r\n              cloudGlbURL={MODELS.DATA_VAN}\r\n              onClick={(show) => null}\r\n              onHover={onHover}\r\n              position={DATA_VAN_POS}\r\n              rotation={DATA_VAN_ROT}\r\n            /> */}\r\n          </>\r\n        ) : null}\r\n        {!isMob && !focussedTruck ? (\r\n          <CloudGLTF\r\n            cloudGlbURL={MODELS.BLENDER}\r\n            onClick={(show) => null}\r\n            fast\r\n            onHover={onHover}\r\n            position={BLENDER_VAN_POS}\r\n            rotation={ROTATION_RIGHT}\r\n          />\r\n        ) : null}\r\n      </Nodes>\r\n\r\n      <EffectComposer multisampling={8} autoClear={false}>\r\n        <Outline\r\n          selection={selected}\r\n          selectionLayer={1}\r\n          visibleEdgeColor=\"white\"\r\n          edgeStrength={5}\r\n        />\r\n      </EffectComposer>\r\n      <Html left portal={props.domNodeRef}>\r\n        {focussedTruck ? (\r\n          <div>\r\n            <IconButton\r\n              className=\"text-neutralPrimary bg-themeLighterAlt\"\r\n              iconProps={{ iconName: \"Back\" }}\r\n              onClick={() => {\r\n                onFocusTruck(null);\r\n                restoreCamera();\r\n                invalidate();\r\n              }}\r\n              text=\"Back to Frac site\"\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </Html>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SitePlayGround;\r\n"],"names":["CloudGLTFGroup","props","meshRef","useRef","node","type","rotation","position","scale","frustumCulled","children","length","map","_","i","index","name","geometry","material","ref","raycast","meshBounds","onPointerOver","e","stopPropagation","onHover","onPointerOut","onClick","forwardRef","scene","useGLTF","cloudGlbURL","useState","hovered","set","useCursor","isMob","isMobile","copiedScene","useMemo","forEach","m","isMesh","fast","MeshBasicMaterial","color","MeshStandardMaterial","metalness","emissive","roughness","clone","uuid","dispose","object","className","context","createContext","Circle","opacity","radius","segments","args","transparent","Nodes","group","nodes","lines","connectedTo","current","start","end","push","add","x","y","z","useFrame","delta","uniforms","dashOffset","value","Provider","line","QuadraticBezierLine","dashed","dashScale","gapSize","lineWidth","Math","PI","ROTATION_RIGHT","BLENDER_VAN_POS","prevCam","focussedTruck","onFocusTruck","MODELS","cam","useThree","camera","cont","controls","PUMPS","pumpsData","HARD_CODED_PUMPS","isFast","smallObj","traverse","o","prevMaterial","boundingSphere","reflectivity","console","log","removeFromParent","useMemoisedScene","invalidate","useEffect","setSelected","selected","undefined","Suspense","fallback","show","multisampling","autoClear","selection","selectionLayer","visibleEdgeColor","edgeStrength","Html","left","portal","domNodeRef","IconButton","iconProps","iconName","reset","text"],"sourceRoot":""}