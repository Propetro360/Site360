{"version":3,"file":"static/js/276.8e4044fc.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/meshBounds.js","shared/cloud-gtlf/cloud-gtlf.js"],"sourcesContent":["import { Matrix4, Ray, Sphere, Vector3 } from 'three';\n\nconst _inverseMatrix = new Matrix4();\n\nconst _ray = new Ray();\n\nconst _sphere = new Sphere();\n\nconst _vA = new Vector3();\n\nfunction meshBounds(raycaster, intersects) {\n  const geometry = this.geometry;\n  const material = this.material;\n  const matrixWorld = this.matrixWorld;\n  if (material === undefined) return; // Checking boundingSphere distance to ray\n\n  if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n  _sphere.copy(geometry.boundingSphere);\n\n  _sphere.applyMatrix4(matrixWorld);\n\n  if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n\n  _inverseMatrix.copy(matrixWorld).invert();\n\n  _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n  if (geometry.boundingBox !== null && _ray.intersectBox(geometry.boundingBox, _vA) === null) return;\n  intersects.push({\n    distance: _vA.distanceTo(raycaster.ray.origin),\n    point: _vA.clone(),\n    object: this\n  });\n}\n\nexport { meshBounds };\n","import { meshBounds, useGLTF } from \"@react-three/drei\";\r\nimport { forwardRef, useMemo, useRef } from \"react\";\r\nimport { MeshStandardMaterial } from \"three\";\r\n\r\nimport \"./cloud-gtlf.scss\";\r\n\r\nexport const CloudGLTF = forwardRef((props, ref) => {\r\n  const { scene } = useGLTF(props.cloudGlbURL);\r\n  // const group = useRef();\r\n\r\n  const copiedScene = useMemo(() => {\r\n    scene.children.forEach(function (m) {\r\n      if (m.isMesh) {\r\n        m.material = new MeshStandardMaterial({\r\n          color: m.material.color,\r\n          metalness: 1,\r\n          emissive: 1,\r\n          roughness: 0.5,\r\n        });\r\n      }\r\n    });\r\n    return scene.clone();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [scene.uuid]);\r\n\r\n  const toggleActiveMesh = (e, meshId) => {\r\n    e.stopPropagation();\r\n    if (meshId === props.activeMesh) {\r\n      props.onHover(null);\r\n    } else {\r\n      props.onHover(meshId);\r\n    }\r\n  };\r\n\r\n  if (props.fast) {\r\n    return (\r\n      <group ref={ref} {...props} dispose={null}>\r\n        <primitive object={copiedScene} />\r\n      </group>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <group ref={ref} {...props} dispose={null} className=\"cursor-pointer\">\r\n      {copiedScene.children.map((_, i) => (\r\n        <CloudGLTFGroup\r\n          key={i + _.name}\r\n          {...props}\r\n          node={_}\r\n          toggleActiveMesh={toggleActiveMesh}\r\n          index={i}\r\n          onHover={() => props.onHover(ref)}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n});\r\n\r\nfunction CloudGLTFGroup({ ...props }) {\r\n  const meshRef = useRef();\r\n  // useBVH(meshRef);\r\n\r\n  if (props.node.type === \"Group\") {\r\n    return (\r\n      <group\r\n        rotation={props.node.rotation}\r\n        position={props.node.position}\r\n        scale={props.node.scale}\r\n        frustumCulled\r\n      >\r\n        {props.node.children.length > 0 &&\r\n          props.node.children.map((_, i) => (\r\n            <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n          ))}\r\n      </group>\r\n    );\r\n  }\r\n  return (\r\n    <mesh\r\n      geometry={props.node.geometry}\r\n      material={props.node.material}\r\n      rotation={props.node.rotation}\r\n      position={props.node.position}\r\n      ref={meshRef}\r\n      raycast={meshBounds}\r\n      scale={props.node.scale}\r\n      onPointerOver={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n      onPointerOut={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(null);\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n    >\r\n      {props.node.children.length > 0 &&\r\n        props.node.children.map((_, i) => (\r\n          <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n        ))}\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default CloudGLTF;\r\n"],"names":["_inverseMatrix","Matrix4","_ray","Ray","_sphere","Sphere","_vA","Vector3","meshBounds","raycaster","intersects","geometry","this","material","matrixWorld","undefined","boundingSphere","computeBoundingSphere","copy","applyMatrix4","ray","intersectsSphere","invert","boundingBox","intersectBox","push","distance","distanceTo","origin","point","clone","object","CloudGLTF","forwardRef","props","ref","scene","useGLTF","cloudGlbURL","copiedScene","useMemo","children","forEach","m","isMesh","MeshStandardMaterial","color","metalness","emissive","roughness","uuid","toggleActiveMesh","e","meshId","stopPropagation","activeMesh","onHover","fast","dispose","className","map","_","i","CloudGLTFGroup","node","index","name","meshRef","useRef","type","rotation","position","scale","frustumCulled","length","raycast","onPointerOver","onPointerOut","onClick"],"sourceRoot":""}