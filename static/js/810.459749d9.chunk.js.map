{"version":3,"file":"static/js/810.459749d9.chunk.js","mappings":"4bAaMA,GAAUC,EAAAA,EAAAA,iBACVC,GAASC,EAAAA,EAAAA,aACb,WASEC,GATF,IAEIC,EAFJ,EAEIA,SAFJ,IAGIC,QAAAA,OAHJ,MAGc,EAHd,MAIIC,OAAAA,OAJJ,MAIa,IAJb,MAKIC,SAAAA,OALJ,MAKe,GALf,MAMIC,MAAAA,OANJ,MAMY,UANZ,EAOOC,GAPP,mBAWE,kCAAMN,IAAKA,GAASM,GAApB,eACE,2BAAgBC,KAAM,CAACJ,EAAQC,MAC/B,8BACEI,YAAaN,EAAU,EACvBA,QAASA,EACTG,MAAOA,IAERJ,SAKA,SAASQ,EAAT,GAA8B,IAAbR,EAAY,EAAZA,SAChBS,GAAQC,EAAAA,EAAAA,UACd,GAAqBC,EAAAA,EAAAA,UAAS,IAA9B,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAQC,EAAAA,EAAAA,UAAQ,WACpB,IAD0B,EACpBD,EAAQ,GADY,UAETF,GAFS,yBAEjBI,EAFiB,QAGxBA,EAAKC,YACFC,KAAI,SAACnB,GAAD,MAAS,CAACiB,EAAKG,SAAUpB,EAAIqB,QAAQD,aACzCE,SAAQ,+BAAEC,EAAF,KAASC,EAAT,YACPT,EAAMU,KAAK,CACTF,MAAOA,EAAMG,QAAQC,IAAI,CAAEC,EAAG,IAAMC,EAAG,EAAGC,EAAG,IAC7CN,IAAKA,EAAIE,QAAQC,IAAI,CAAEC,GAAI,IAAMC,EAAG,EAAGC,EAAG,UANlD,2BACE,IAHwB,8BAW1B,OAAOf,IACN,CAACF,IAOJ,OANAkB,EAAAA,EAAAA,IAAS,SAACC,EAAGC,GAAJ,OACPvB,EAAMW,QAAQpB,SAASqB,SACrB,SAACZ,GAAD,OACGA,EAAMT,SAAS,GAAGiC,SAASC,SAASC,WAAWC,OAAiB,GAARJ,SAI7D,UAACrC,EAAQ0C,SAAT,CAAkBD,MAAOvB,EAAzB,WACE,kBAAOd,IAAKU,EAAZ,SACGK,EAAMI,KAAI,SAACoB,EAAMC,GAAP,OACT,8BACE,SAACC,EAAA,GAAD,kBAEMF,GAFN,IAGElC,MAAM,QACNqC,QAAM,EACNC,UAAW,GACXC,QAAS,KALJJ,EAAQ,gBAOf,SAACC,EAAA,GAAD,kBAEMF,GAFN,IAGElC,MAAM,MACNwC,UAAW,EACXrC,aAAW,EACXN,QAAS,KALJsC,EAAQ,uBAUpBvC,EACAc,EAAMI,KAAI,WAAiBqB,GAAjB,IAAGjB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OACT,mBAAqC,aAAY,EAAjD,WACE,SAAC1B,EAAD,CAAQsB,SAAUG,KAClB,SAACzB,EAAD,CAAQsB,SAAUI,MAFRgB,EAAQ,uBASrB,IAAMM,GAAO/C,EAAAA,EAAAA,aAClB,WAEEC,GACI,IAAD,IAFDK,MAAAA,OAEC,MAFO,QAEP,OAFgB0C,KAEhB,EAFsB7B,aAAAA,OAEtB,MAFoC,GAEpC,MAFwCE,SAAAA,OAExC,MAFmD,CAAC,EAAG,EAAG,GAE1D,EAFiEd,GAEjE,YACGQ,GAAMkC,EAAAA,EAAAA,YAAWpD,GACvB,GAAcgB,EAAAA,EAAAA,WAAS,yBAAUqC,EAAAA,SAAV,OAA2B7B,OAA3C8B,GAAP,eACMC,GAAQnC,EAAAA,EAAAA,UACZ,iBAAO,CAAEI,SAAU8B,EAAKhC,YAAAA,KACxB,CAACgC,EAAKhC,IAQR,OALAkC,EAAAA,EAAAA,kBAAgB,WAEd,OADAtC,GAAI,SAACD,GAAD,wBAAeA,GAAf,CAAsBsC,OACnB,WAAWrC,GAAI,SAACD,GAAD,OAAWA,EAAMwC,QAAO,SAACC,GAAD,OAAOA,IAAMH,WAC1D,CAACA,EAAOD,EAAKpC,KAGd,SAAChB,GAAD,QACEE,IAAKA,EACLE,QAAS,GACTC,OAAQ,GACRE,MAAOA,EACPe,SAAU8B,GACN5C,O,UC7ECiD,EAAgB,CAAC,GAAIC,KAAKC,GAAK,EAAG,GAClCC,EAAiB,CAAC,EAAGF,KAAKC,GAAK,EAAG,GAUlCE,EAAgB,CAAC,GAAI,GAAI,IACzBC,EAAe,CAAC,GAAI,GAAI,IACxBC,EAAkB,CAAC,IAAK,EAAG,IAC3BC,EAAc,CAAC,EAAG,EAAG,IACrBC,EAAmB,CAAC,EAAG,EAAG,IAC1BC,EAAe,CAAC,EAAGR,KAAKC,GAAK,EAAG,GCjCvCQ,GAAiBC,EAAAA,EAAAA,OACrBC,EAAAA,EAAAA,OAAK,kBAAM,yDAEPC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,iCAgL7B,MA9KA,SAAwB7D,GACtB,IAAM+D,GAAO1D,EAAAA,EAAAA,QAAO,MACd2D,GAAQ3D,EAAAA,EAAAA,QAAO,MACf4D,GAAO5D,EAAAA,EAAAA,QAAO,MACd6D,GAAO7D,EAAAA,EAAAA,QAAO,MACpB,GAA2BC,EAAAA,EAAAA,UAAS,MAApC,eAAO6D,EAAP,KAAgBC,EAAhB,KACA,GAA8B9D,EAAAA,EAAAA,UAAS,MAAvC,eAAO+D,EAAP,KAAgBC,EAAhB,KACA,GAAsChE,EAAAA,EAAAA,UAAS,MAA/C,eAAOiE,EAAP,KAAsBC,EAAtB,KACQC,GAAUC,EAAAA,EAAAA,GAAQC,EAAAA,EAAAA,OAAlBF,MACFG,GAAMC,EAAAA,EAAAA,IAAS,qBAAGC,UAClBC,GAAOF,EAAAA,EAAAA,IAAS,qBAAGG,YACnBC,EAAQjF,EAAMkF,UAAUC,OAASnF,EAAMkF,UAAYE,EAAAA,EACzD,EDtC8B,SAACX,GAC/B,IAAMY,GAAQC,EAAAA,EAAAA,KAkCd,MAAO,CAAEC,aAhCW7E,EAAAA,EAAAA,UAAQ,WAC1B,IAAM8E,EAAW,GA2BjB,OA1BAf,EAAMgB,UAAS,SAACC,GAAO,IAAD,EACpB,GAAKA,EAAEC,OAAP,CACA,IAUO,EAVHC,EAAeF,EAAE9D,SACjB/B,EAAM,UAAG6F,EAAEG,gBAAL,aAAG,EAAYC,eAAejG,OACpCA,EAAS,IAAMA,EAAS,KAC1B2F,EAASrE,KAAKuE,GACdK,QAAQC,IAAIN,IAGZA,EAAE9D,SADAyD,GAASxF,EAAS,IACP,IAAIoG,EAAAA,kBAAkB,CACjClG,MAAO6F,EAAa7F,QAGT,IAAImG,EAAAA,qBAAqB,CACpCnG,MAAO6F,EAAa7F,MACpBoG,UAAW,EACXC,SAAU,EACVC,UAAS,UAAET,EAAaS,iBAAf,QAA4B,SAK3Cb,EAASxE,SAAQ,SAAC0E,GAChBA,EAAEY,sBAGG7B,EAAMrD,UAEZ,CAACqD,EAAM8B,QCKcC,CAAiB/B,GAAjCc,EAAR,EAAQA,YACFkB,GAAa5B,EAAAA,EAAAA,IAAS,qBAAG4B,cACzBC,EAAY,SAACC,GAAD,OACfpC,GAAiBoC,EAAK,mBAAqBpC,EAAc,mBAE5DqC,EAAAA,EAAAA,YAAU,WACRrC,GAAiBvE,EAAM6G,YAAYtC,EAAc,oBAChD,CAACA,EAAevE,IAYnB,IAAM8G,EAAW,SAACH,GAAD,OAAUA,EAAK,mBAAqB3G,EAAM+G,UAErDC,EAAiB/B,EAAME,OAAS,EAEhC4B,EAAW5C,EAAU,CAACA,QAAW8C,EAEvC,OACE,iCACE,UAAC9G,EAAD,YACE,SAAC,EAAA+G,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,SACGlC,EAAMpE,KAAI,SAAC8F,EAAMS,GAChB,MD3BU,SAACJ,EAAgBI,EAAGV,GACxC,MAAO,CACLM,EAAiBI,EAAI,IAAM,GAC3B,EAAgB,GAAZV,EACHU,EAAIJ,EAAkB,GCuBGK,CAChBL,EACAI,EACA7C,GACEoC,EAAK,mBAAqBpC,EAAc,kBAJ5C,eAAOjD,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAMA,OACE,SAACmC,EAAD,CAEE7C,SAAU,CAACQ,EAAGC,EAAGC,GACjB8F,QAAS,WACPtH,EAAM6G,YAAYF,EAAK,kBACvBF,KAEFc,cAAe,WACb,GAAIb,EAAUC,GAAO,CAAC,IAAD,EACf,OAAJ5B,QAAI,IAAJA,GAAAA,EAAMyC,YACN,IAAMC,EAAY,GAClBA,EAAU3G,SAAW8D,EAAI9D,SAASM,QAClCqG,EAAUC,SAAW9C,EAAI8C,SAAStG,QAClCqG,EAAUE,cAAV,OAA0B5C,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAM6C,cAAhC,aAA0B,EAAcxG,QAExCkD,EAAWmD,GAEXzH,EAAM6G,YAAYF,EAAK,kBACvBnC,EAAamC,GACb/B,EAAI9D,SAASN,IAAI,IAAMc,EAAGC,EAAI,EAAG,EAAIC,GACrCiF,MAGJrC,QAASA,EACT0C,SACE9G,EAAM6H,iBAAiB,eAAiBf,EAASH,GAEnDmB,KAAMpB,EAAUC,GAChBoB,WACExD,GACAoC,EAAK,mBAAqBpC,EAAc,iBAE1CE,MAAOc,EACPoB,KAAMA,EACNqB,gBAAiBhI,EAAMgI,gBACvBN,SAAUV,EAAiBI,EAAInE,EAAgBG,EAC/C6E,YAAatD,EAAAA,EAAAA,MACbuD,MAAO3D,EAAgB,EAAI,GApCtBoC,EAAK,uBA0ChBpC,EAmDE,MAlDF,iCACE,SAACT,EAAD,CACEpE,IAAKqE,EACLkE,YAAatD,EAAAA,EAAAA,QACbwD,QAAS,KACTb,QAAS,SAACQ,GACR/B,QAAQC,IAAI,uBAEd5B,QAASA,EACTtD,SAAU0C,KAEZ,SAAChB,EAAD,CACE9C,IAAKsE,EACLvB,KAAK,UACL3B,SAAU2C,EACV7C,YAAa,CAACqD,MAEhB,SAACH,EAAD,CACEpE,IAAKuE,EACLgE,YAAatD,EAAAA,EAAAA,UACb2C,QAAS,SAACQ,GACR/B,QAAQC,IAAI,uBAEd5B,QAASA,EACTtD,SAAUuC,EACV6E,MAAO,KAGT,SAACpE,EAAD,CACEpE,IAAKwE,EACL+D,YAAatD,EAAAA,EAAAA,SACb2C,QAAS,SAACQ,GACR/B,QAAQC,IAAI,uBAEd5B,QAASA,EACTtD,SAAUwC,EACVoE,SAAUhE,KAEZ,SAAC,EAAAwD,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAACrD,EAAD,CACEmE,YAAatD,EAAAA,EAAAA,QACb2C,QAAS,SAACQ,GACR/B,QAAQC,IAAI,uBAEd5B,QAASA,EACTtD,SAAUyC,EACVmE,SAAUtE,aAOpB,SAAC,KAAD,CAAgBgF,cAAe,EAAGC,WAAW,EAA7C,UACE,SAAC,KAAD,CACEC,UAAWvB,EACXwB,eAAgB,EAChBC,iBAAiB,QACjBC,aAAc,OAGlB,SAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,OAAQ5I,EAAM6I,WAAzB,SACGtE,GACC,0BACE,SAACuE,EAAA,EAAD,CACEC,UAAU,yCACVC,UAAW,CAAEC,SAAU,QACvB3B,QAAS,WACP9C,EAAa,MA5IzBI,EAAI9D,SAASN,IACX6D,EAAQvD,SAASQ,EACjB+C,EAAQvD,SAASS,EACjB8C,EAAQvD,SAASU,GAEf,OAAJuD,QAAI,IAAJA,GAAAA,EAAMmE,QAENzC,IAuIYA,KAEF0C,KAAK,wBAGP","sources":["components/nodes/node.js","components/site-canvas/site-playground/site-scene.js","components/site-canvas/site-playground/site-playground.js"],"sourcesContent":["import { QuadraticBezierLine } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport {\r\n  createContext,\r\n  forwardRef,\r\n  useContext,\r\n  useLayoutEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst context = createContext();\r\nconst Circle = forwardRef(\r\n  (\r\n    {\r\n      children,\r\n      opacity = 1,\r\n      radius = 0.05,\r\n      segments = 32,\r\n      color = \"#ff1050\",\r\n      ...props\r\n    },\r\n    ref\r\n  ) => (\r\n    <mesh ref={ref} {...props}>\r\n      <circleGeometry args={[radius, segments]} />\r\n      <meshBasicMaterial\r\n        transparent={opacity < 1}\r\n        opacity={opacity}\r\n        color={color}\r\n      />\r\n      {children}\r\n    </mesh>\r\n  )\r\n);\r\n\r\nexport function Nodes({ children }) {\r\n  const group = useRef();\r\n  const [nodes, set] = useState([]);\r\n  const lines = useMemo(() => {\r\n    const lines = [];\r\n    for (let node of nodes)\r\n      node.connectedTo\r\n        .map((ref) => [node.position, ref.current.position])\r\n        .forEach(([start, end]) =>\r\n          lines.push({\r\n            start: start.clone().add({ x: 0.35, y: 0, z: 0 }),\r\n            end: end.clone().add({ x: -0.35, y: 0, z: 0 }),\r\n          })\r\n        );\r\n    return lines;\r\n  }, [nodes]);\r\n  useFrame((_, delta) =>\r\n    group.current.children.forEach(\r\n      (group) =>\r\n        (group.children[0].material.uniforms.dashOffset.value -= delta * 10)\r\n    )\r\n  );\r\n  return (\r\n    <context.Provider value={set}>\r\n      <group ref={group}>\r\n        {lines.map((line, index) => (\r\n          <group>\r\n            <QuadraticBezierLine\r\n              key={index + \"Bezier spot\"}\r\n              {...line}\r\n              color=\"white\"\r\n              dashed\r\n              dashScale={50}\r\n              gapSize={20}\r\n            />\r\n            <QuadraticBezierLine\r\n              key={index + \"Bezier line\"}\r\n              {...line}\r\n              color=\"red\"\r\n              lineWidth={3}\r\n              transparent\r\n              opacity={0.5}\r\n            />\r\n          </group>\r\n        ))}\r\n      </group>\r\n      {children}\r\n      {lines.map(({ start, end }, index) => (\r\n        <group key={index + \"Bezier circle\"} position-z={1}>\r\n          <Circle position={start} />\r\n          <Circle position={end} />\r\n        </group>\r\n      ))}\r\n    </context.Provider>\r\n  );\r\n}\r\n\r\nexport const Node = forwardRef(\r\n  (\r\n    { color = \"black\", name, connectedTo = [], position = [0, 0, 0], ...props },\r\n    ref\r\n  ) => {\r\n    const set = useContext(context);\r\n    const [pos] = useState(() => new THREE.Vector3(...position));\r\n    const state = useMemo(\r\n      () => ({ position: pos, connectedTo }),\r\n      [pos, connectedTo]\r\n    );\r\n    // Register this node on mount, unregister on unmount\r\n    useLayoutEffect(() => {\r\n      set((nodes) => [...nodes, state]);\r\n      return () => void set((nodes) => nodes.filter((n) => n !== state));\r\n    }, [state, pos, set]);\r\n    // Drag n drop, hover\r\n    return (\r\n      <Circle\r\n        ref={ref}\r\n        opacity={0.2}\r\n        radius={0.5}\r\n        color={color}\r\n        position={pos}\r\n        {...props}\r\n      ></Circle>\r\n    );\r\n  }\r\n);\r\n","import { useMemo } from \"react\";\r\nimport { MeshBasicMaterial, MeshStandardMaterial } from \"three\";\r\nimport { isMobile } from \"../../../utils/utils\";\r\n\r\nexport const useMemoisedScene = (scene) => {\r\n  const isMob = isMobile();\r\n\r\n  const copiedScene = useMemo(() => {\r\n    const smallObj = [];\r\n    scene.traverse((o) => {\r\n      if (!o.isMesh) return;\r\n      var prevMaterial = o.material;\r\n      let radius = o.geometry?.boundingSphere.radius;\r\n      if (radius > 10 && radius < 30) {\r\n        smallObj.push(o);\r\n        console.log(o);\r\n      }\r\n      if (isMob || radius < 200) {\r\n        o.material = new MeshBasicMaterial({\r\n          color: prevMaterial.color,\r\n        });\r\n      } else {\r\n        o.material = new MeshStandardMaterial({\r\n          color: prevMaterial.color,\r\n          metalness: 1,\r\n          emissive: 1,\r\n          roughness: prevMaterial.roughness ?? 0.5,\r\n        });\r\n      }\r\n    });\r\n\r\n    smallObj.forEach((o) => {\r\n      o.removeFromParent();\r\n    });\r\n\r\n    return scene.clone();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [scene.uuid]);\r\n\r\n  return { copiedScene };\r\n};\r\n\r\nexport const ROTATION_LEFT = [0, -Math.PI / 2, 0];\r\nexport const ROTATION_RIGHT = [0, Math.PI / 2, 0];\r\n\r\nexport const getPos = (LEFT_POS_START, i, isOnFocus) => {\r\n  return [\r\n    LEFT_POS_START < i ? 15 : -15,\r\n    0 + isOnFocus * 10,\r\n    (i % LEFT_POS_START) * 5,\r\n  ];\r\n};\r\n\r\nexport const WELL_HEAD_POS = [0, -1, -20];\r\nexport const DATA_VAN_POS = [15, 1, -10];\r\nexport const BLENDER_VAN_POS = [10, -1, 35];\r\nexport const MISSILE_POS = [0, 0, 20];\r\nexport const MISSILE_NODE_POS = [0, 1, 20];\r\nexport const DATA_VAN_ROT = [0, Math.PI / 2, 0];\r\n","import { IconButton } from \"@fluentui/react\";\r\nimport { Html, useGLTF } from \"@react-three/drei\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport { EffectComposer, Outline } from \"@react-three/postprocessing\";\r\nimport { lazy, memo, Suspense, useEffect, useRef, useState } from \"react\";\r\nimport { MODELS } from \"../../../config/azure-gltf\";\r\nimport { PUMPS as HARD_CODED_PUMPS } from \"../../../config/pumps\";\r\n\r\n// import CloudGLTF from \"../../../shared/cloud-gtlf/cloud-gtlf\";\r\nimport CircleLoader from \"../../../shared/loader\";\r\n// import TruckCloudGTLF from \"../../../shared/truck-cloud-gtlf/truck-cloud-gtlf\";\r\nimport { Node, Nodes } from \"../../nodes/node\";\r\nimport {\r\n  BLENDER_VAN_POS,\r\n  DATA_VAN_POS,\r\n  DATA_VAN_ROT,\r\n  getPos,\r\n  MISSILE_NODE_POS,\r\n  MISSILE_POS,\r\n  ROTATION_LEFT,\r\n  ROTATION_RIGHT,\r\n  useMemoisedScene,\r\n  WELL_HEAD_POS,\r\n} from \"./site-scene\";\r\n\r\nconst TruckCloudGTLF = memo(\r\n  lazy(() => import(\"../../../shared/truck-cloud-gtlf/truck-cloud-gtlf\"))\r\n);\r\nconst CloudGLTF = lazy(() => import(\"../../../shared/cloud-gtlf/cloud-gtlf\"));\r\n\r\nfunction SitePlayGround(props) {\r\n  const mRef = useRef(null);\r\n  const nCRef = useRef(null);\r\n  const wRef = useRef(null);\r\n  const dRef = useRef(null);\r\n  const [hovered, onHover] = useState(null);\r\n  const [prevCam, setPrevCam] = useState(null);\r\n  const [focussedTruck, onFocusTruck] = useState(null);\r\n  const { scene } = useGLTF(MODELS.TRUCK);\r\n  const cam = useThree(({ camera }) => camera);\r\n  const cont = useThree(({ controls }) => controls);\r\n  const PUMPS = props.pumpsData.length ? props.pumpsData : HARD_CODED_PUMPS;\r\n  const { copiedScene } = useMemoisedScene(scene);\r\n  const invalidate = useThree(({ invalidate }) => invalidate);\r\n  const isOnFocus = (pump) =>\r\n    !focussedTruck || pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"];\r\n\r\n  useEffect(() => {\r\n    focussedTruck && props.setSelected(focussedTruck[\"Pump Position\"]);\r\n  }, [focussedTruck, props]);\r\n  function restoreCamera() {\r\n    cam.position.set(\r\n      prevCam.position.x,\r\n      prevCam.position.y,\r\n      prevCam.position.z\r\n    );\r\n    cont?.reset();\r\n\r\n    invalidate();\r\n  }\r\n\r\n  const isActive = (pump) => pump[\"Pump Position\"] === props.selected;\r\n\r\n  const LEFT_POS_START = PUMPS.length / 2;\r\n\r\n  const selected = hovered ? [hovered] : undefined;\r\n\r\n  return (\r\n    <>\r\n      <Nodes>\r\n        <Suspense fallback={<CircleLoader />}>\r\n          {PUMPS.map((pump, i) => {\r\n            const [x, y, z] = getPos(\r\n              LEFT_POS_START,\r\n              i,\r\n              focussedTruck &&\r\n                pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"]\r\n            );\r\n            return (\r\n              <TruckCloudGTLF\r\n                key={pump[\"Pump Position\"]}\r\n                position={[x, y, z]}\r\n                onClick={() => {\r\n                  props.setSelected(pump[\"Pump Position\"]);\r\n                  invalidate();\r\n                }}\r\n                onDoubleClick={() => {\r\n                  if (isOnFocus(pump)) {\r\n                    cont?.saveState();\r\n                    const camToSave = {};\r\n                    camToSave.position = cam.position.clone();\r\n                    camToSave.rotation = cam.rotation.clone();\r\n                    camToSave.controlCenter = cont?.target?.clone();\r\n\r\n                    setPrevCam(camToSave);\r\n\r\n                    props.setSelected(pump[\"Pump Position\"]);\r\n                    onFocusTruck(pump);\r\n                    cam.position.set(4.5 * x, y + 9, 3 * z);\r\n                    invalidate();\r\n                  }\r\n                }}\r\n                onHover={onHover}\r\n                isActive={\r\n                  props.selectionOptions[\"Select All\"] || isActive(pump)\r\n                }\r\n                show={isOnFocus(pump)}\r\n                isFocussed={\r\n                  focussedTruck &&\r\n                  pump[\"Pump Position\"] === focussedTruck[\"Pump Position\"]\r\n                }\r\n                scene={copiedScene}\r\n                pump={pump}\r\n                setAlertedParts={props.setAlertedParts}\r\n                rotation={LEFT_POS_START < i ? ROTATION_LEFT : ROTATION_RIGHT}\r\n                cloudGlbURL={MODELS.TRUCK}\r\n                scale={focussedTruck ? 2 : 1}\r\n              />\r\n            );\r\n          })}\r\n        </Suspense>\r\n\r\n        {!focussedTruck ? (\r\n          <>\r\n            <CloudGLTF\r\n              ref={mRef}\r\n              cloudGlbURL={MODELS.MISSILE}\r\n              assetId={4347}\r\n              onClick={(show) => {\r\n                console.log(\"clicked on missile\");\r\n              }}\r\n              onHover={onHover}\r\n              position={MISSILE_POS}\r\n            />\r\n            <Node\r\n              ref={nCRef}\r\n              name=\"missile\"\r\n              position={MISSILE_NODE_POS}\r\n              connectedTo={[wRef]}\r\n            />\r\n            <CloudGLTF\r\n              ref={wRef}\r\n              cloudGlbURL={MODELS.WELL_HEAD}\r\n              onClick={(show) => {\r\n                console.log(\"clicked on missile\");\r\n              }}\r\n              onHover={onHover}\r\n              position={WELL_HEAD_POS}\r\n              scale={5}\r\n            />\r\n\r\n            <CloudGLTF\r\n              ref={dRef}\r\n              cloudGlbURL={MODELS.DATA_VAN}\r\n              onClick={(show) => {\r\n                console.log(\"clicked on missile\");\r\n              }}\r\n              onHover={onHover}\r\n              position={DATA_VAN_POS}\r\n              rotation={DATA_VAN_ROT}\r\n            />\r\n            <Suspense fallback={<CircleLoader />}>\r\n              <CloudGLTF\r\n                cloudGlbURL={MODELS.BLENDER}\r\n                onClick={(show) => {\r\n                  console.log(\"clicked on missile\");\r\n                }}\r\n                onHover={onHover}\r\n                position={BLENDER_VAN_POS}\r\n                rotation={ROTATION_RIGHT}\r\n              />\r\n            </Suspense>\r\n          </>\r\n        ) : null}\r\n      </Nodes>\r\n\r\n      <EffectComposer multisampling={8} autoClear={false}>\r\n        <Outline\r\n          selection={selected}\r\n          selectionLayer={1}\r\n          visibleEdgeColor=\"white\"\r\n          edgeStrength={5}\r\n        />\r\n      </EffectComposer>\r\n      <Html left portal={props.domNodeRef}>\r\n        {focussedTruck ? (\r\n          <div>\r\n            <IconButton\r\n              className=\"text-neutralPrimary bg-themeLighterAlt\"\r\n              iconProps={{ iconName: \"Back\" }}\r\n              onClick={() => {\r\n                onFocusTruck(null);\r\n                restoreCamera();\r\n                invalidate();\r\n              }}\r\n              text=\"Back to Frac site\"\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </Html>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SitePlayGround;\r\n"],"names":["context","createContext","Circle","forwardRef","ref","children","opacity","radius","segments","color","props","args","transparent","Nodes","group","useRef","useState","nodes","set","lines","useMemo","node","connectedTo","map","position","current","forEach","start","end","push","clone","add","x","y","z","useFrame","_","delta","material","uniforms","dashOffset","value","Provider","line","index","QuadraticBezierLine","dashed","dashScale","gapSize","lineWidth","Node","name","useContext","THREE","pos","state","useLayoutEffect","filter","n","ROTATION_LEFT","Math","PI","ROTATION_RIGHT","WELL_HEAD_POS","DATA_VAN_POS","BLENDER_VAN_POS","MISSILE_POS","MISSILE_NODE_POS","DATA_VAN_ROT","TruckCloudGTLF","memo","lazy","CloudGLTF","mRef","nCRef","wRef","dRef","hovered","onHover","prevCam","setPrevCam","focussedTruck","onFocusTruck","scene","useGLTF","MODELS","cam","useThree","camera","cont","controls","PUMPS","pumpsData","length","HARD_CODED_PUMPS","isMob","isMobile","copiedScene","smallObj","traverse","o","isMesh","prevMaterial","geometry","boundingSphere","console","log","MeshBasicMaterial","MeshStandardMaterial","metalness","emissive","roughness","removeFromParent","uuid","useMemoisedScene","invalidate","isOnFocus","pump","useEffect","setSelected","isActive","selected","LEFT_POS_START","undefined","Suspense","fallback","i","getPos","onClick","onDoubleClick","saveState","camToSave","rotation","controlCenter","target","selectionOptions","show","isFocussed","setAlertedParts","cloudGlbURL","scale","assetId","multisampling","autoClear","selection","selectionLayer","visibleEdgeColor","edgeStrength","Html","left","portal","domNodeRef","IconButton","className","iconProps","iconName","reset","text"],"sourceRoot":""}