{"version":3,"file":"static/js/276.701a72b7.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/meshBounds.js","shared/cloud-gtlf/cloud-gtlf.js","../node_modules/@react-three/drei/web/useCursor.js"],"sourcesContent":["import { Matrix4, Ray, Sphere, Vector3 } from 'three';\n\nconst _inverseMatrix = new Matrix4();\n\nconst _ray = new Ray();\n\nconst _sphere = new Sphere();\n\nconst _vA = new Vector3();\n\nfunction meshBounds(raycaster, intersects) {\n  const geometry = this.geometry;\n  const material = this.material;\n  const matrixWorld = this.matrixWorld;\n  if (material === undefined) return; // Checking boundingSphere distance to ray\n\n  if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n  _sphere.copy(geometry.boundingSphere);\n\n  _sphere.applyMatrix4(matrixWorld);\n\n  if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n\n  _inverseMatrix.copy(matrixWorld).invert();\n\n  _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n  if (geometry.boundingBox !== null && _ray.intersectBox(geometry.boundingBox, _vA) === null) return;\n  intersects.push({\n    distance: _vA.distanceTo(raycaster.ray.origin),\n    point: _vA.clone(),\n    object: this\n  });\n}\n\nexport { meshBounds };\n","import { meshBounds, useCursor, useGLTF } from \"@react-three/drei\";\r\nimport { forwardRef, useMemo, useRef, useState } from \"react\";\r\nimport { MeshBasicMaterial, MeshStandardMaterial } from \"three\";\r\n\r\nimport \"./cloud-gtlf.scss\";\r\n\r\nexport const CloudGLTF = forwardRef((props, ref) => {\r\n  const { scene } = useGLTF(props.cloudGlbURL);\r\n  const [hovered, set] = useState();\r\n  useCursor(hovered, \"pointer\");\r\n\r\n  // const group = useRef();\r\n\r\n  const copiedScene = useMemo(() => {\r\n    scene.children.forEach(function (m) {\r\n      if (m.isMesh) {\r\n        if (!props.fast) {\r\n          m.material = new MeshStandardMaterial({\r\n            color: m.material.color,\r\n            metalness: 1,\r\n            emissive: 1,\r\n            roughness: 0.5,\r\n          });\r\n        } else {\r\n          m.material = new MeshBasicMaterial({ color: m.material.color });\r\n        }\r\n      }\r\n    });\r\n    return scene.clone();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [scene.uuid]);\r\n\r\n  const onPointerOver = (e) => {\r\n    e.stopPropagation();\r\n    set(true);\r\n  };\r\n\r\n  const onPointerOut = (e) => {\r\n    e.stopPropagation();\r\n    set(false);\r\n  };\r\n\r\n  if (props.fast) {\r\n    return (\r\n      <group\r\n        ref={ref}\r\n        {...props}\r\n        dispose={null}\r\n        onPointerOver={onPointerOver}\r\n        onPointerOut={onPointerOut}\r\n      >\r\n        <primitive object={copiedScene} />\r\n      </group>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <group\r\n      ref={ref}\r\n      {...props}\r\n      dispose={null}\r\n      onPointerOver={onPointerOver}\r\n      onPointerOut={onPointerOut}\r\n      className=\"cursor-pointer\"\r\n    >\r\n      {copiedScene.children.map((_, i) => (\r\n        <CloudGLTFGroup\r\n          key={i + _.name}\r\n          {...props}\r\n          node={_}\r\n          index={i}\r\n          onHover={() => props.onHover(ref)}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n});\r\n\r\nfunction CloudGLTFGroup({ ...props }) {\r\n  const meshRef = useRef();\r\n  // useBVH(meshRef);\r\n\r\n  if (props.node.type === \"Group\") {\r\n    return (\r\n      <group\r\n        rotation={props.node.rotation}\r\n        position={props.node.position}\r\n        scale={props.node.scale}\r\n        frustumCulled\r\n      >\r\n        {props.node.children.length > 0 &&\r\n          props.node.children.map((_, i) => (\r\n            <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n          ))}\r\n      </group>\r\n    );\r\n  }\r\n  return (\r\n    <mesh\r\n      geometry={props.node.geometry}\r\n      material={props.node.material}\r\n      rotation={props.node.rotation}\r\n      position={props.node.position}\r\n      ref={meshRef}\r\n      raycast={meshBounds}\r\n      scale={props.node.scale}\r\n      onPointerOver={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n      onPointerOut={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(null);\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        props.onHover(meshRef);\r\n      }}\r\n    >\r\n      {props.node.children.length > 0 &&\r\n        props.node.children.map((_, i) => (\r\n          <CloudGLTFGroup key={i + _.name} {...props} node={_} index={i} />\r\n        ))}\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default CloudGLTF;\r\n","import * as React from 'react';\n\nfunction useCursor(hovered, onPointerOver = 'pointer', onPointerOut = 'auto') {\n  React.useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = onPointerOver;\n      return () => void (document.body.style.cursor = onPointerOut);\n    }\n  }, [hovered]);\n}\n\nexport { useCursor };\n"],"names":["_inverseMatrix","Matrix4","_ray","Ray","_sphere","Sphere","_vA","Vector3","meshBounds","raycaster","intersects","geometry","this","material","matrixWorld","undefined","boundingSphere","computeBoundingSphere","copy","applyMatrix4","ray","intersectsSphere","invert","boundingBox","intersectBox","push","distance","distanceTo","origin","point","clone","object","CloudGLTF","forwardRef","props","ref","scene","useGLTF","cloudGlbURL","useState","hovered","set","useCursor","copiedScene","useMemo","children","forEach","m","isMesh","fast","MeshBasicMaterial","color","MeshStandardMaterial","metalness","emissive","roughness","uuid","onPointerOver","e","stopPropagation","onPointerOut","dispose","className","map","_","i","CloudGLTFGroup","node","index","onHover","name","meshRef","useRef","type","rotation","position","scale","frustumCulled","length","raycast","onClick","React","document","body","style","cursor"],"sourceRoot":""}